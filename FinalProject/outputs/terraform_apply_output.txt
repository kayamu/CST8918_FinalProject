@kayamu âžœ /workspaces/CST8918_FinalProject/FinalProject (main) $ terraform apply -auto-approve
var.db_password
  Password for the RDS instance.

  Enter a value: 

var.project_name
  Enter a value: CST8918_FinalProject

module.asg.data.aws_ami.amazon_linux: Reading...
data.aws_availability_zones.available: Reading...
data.aws_ami.amazon_linux: Reading...
module.vpc.data.aws_availability_zones.available: Reading...
data.aws_availability_zones.available: Read complete after 0s [id=us-east-1]
module.vpc.data.aws_availability_zones.available: Read complete after 0s [id=us-east-1]
data.aws_ami.amazon_linux: Read complete after 0s [id=ami-0a38b8c18f189761a]
module.asg.data.aws_ami.amazon_linux: Read complete after 0s [id=ami-0a38b8c18f189761a]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.alb.aws_lb.main will be created
  + resource "aws_lb" "main" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "main-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags_all                                                     = (known after apply)
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # module.alb.aws_lb_listener.main will be created
  + resource "aws_lb_listener" "main" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = (known after apply)
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # module.alb.aws_lb_target_group.main will be created
  + resource "aws_lb_target_group" "main" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "main-tg"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check (known after apply)

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.asg.aws_autoscaling_group.main will be created
  + resource "aws_autoscaling_group" "main" {
      + arn                              = (known after apply)
      + availability_zones               = (known after apply)
      + default_cooldown                 = (known after apply)
      + desired_capacity                 = 2
      + force_delete                     = false
      + force_delete_warm_pool           = false
      + health_check_grace_period        = 300
      + health_check_type                = "EC2"
      + id                               = (known after apply)
      + ignore_failed_scaling_activities = false
      + load_balancers                   = (known after apply)
      + max_size                         = 3
      + metrics_granularity              = "1Minute"
      + min_size                         = 1
      + name                             = "main-asg"
      + name_prefix                      = (known after apply)
      + predicted_capacity               = (known after apply)
      + protect_from_scale_in            = false
      + service_linked_role_arn          = (known after apply)
      + target_group_arns                = (known after apply)
      + vpc_zone_identifier              = (known after apply)
      + wait_for_capacity_timeout        = "10m"
      + warm_pool_size                   = (known after apply)

      + availability_zone_distribution (known after apply)

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = "$Latest"
        }

      + mixed_instances_policy (known after apply)

      + traffic_source (known after apply)
    }

  # module.asg.aws_launch_template.main will be created
  + resource "aws_launch_template" "main" {
      + arn                    = (known after apply)
      + default_version        = (known after apply)
      + id                     = (known after apply)
      + image_id               = "ami-0a38b8c18f189761a"
      + instance_type          = "t3.micro"
      + latest_version         = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "asg-launch-template-"
      + tags_all               = (known after apply)
      + user_data              = "IyEvYmluL2Jhc2gKeXVtIHVwZGF0ZSAteQp5dW0gaW5zdGFsbCAteSBodHRwZApzeXN0ZW1jdGwgc3RhcnQgaHR0cGQKc3lzdGVtY3RsIGVuYWJsZSBodHRwZAplY2hvICdIZWxsbyBmcm9tIEFTRyBpbnN0YW5jZScgPiAvdmFyL3d3dy9odG1sL2luZGV4Lmh0bWwK"
      + vpc_security_group_ids = (known after apply)

      + metadata_options (known after apply)
    }

  # module.monitoring.aws_cloudwatch_log_group.app will be created
  + resource "aws_cloudwatch_log_group" "app" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/ec2/CST8918_FinalProject"
      + name_prefix       = (known after apply)
      + retention_in_days = 7
      + skip_destroy      = false
      + tags_all          = (known after apply)
    }

  # module.monitoring.aws_cloudwatch_metric_alarm.cpu_high will be created
  + resource "aws_cloudwatch_metric_alarm" "cpu_high" {
      + actions_enabled                       = true
      + alarm_description                     = "This metric monitors high CPU utilization"
      + alarm_name                            = "CST8918_FinalProject-high-cpu"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "AutoScalingGroupName" = "main-asg"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/EC2"
      + period                                = 120
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 70
      + treat_missing_data                    = "missing"
    }

  # module.rds.aws_db_instance.main will be created
  + resource "aws_db_instance" "main" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + apply_immediately                     = false
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = (known after apply)
      + backup_target                         = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + database_insights_mode                = (known after apply)
      + db_name                               = (known after apply)
      + db_subnet_group_name                  = "main-db-subnet-group"
      + dedicated_log_volume                  = false
      + delete_automated_backups              = true
      + domain_fqdn                           = (known after apply)
      + endpoint                              = (known after apply)
      + engine                                = "mysql"
      + engine_lifecycle_support              = (known after apply)
      + engine_version                        = "8.0"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = (known after apply)
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.micro"
      + iops                                  = (known after apply)
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + listener_endpoint                     = (known after apply)
      + maintenance_window                    = (known after apply)
      + master_user_secret                    = (known after apply)
      + master_user_secret_kms_key_id         = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = (known after apply)
      + nchar_character_set_name              = (known after apply)
      + network_type                          = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = (known after apply)
      + password                              = (sensitive value)
      + password_wo                           = (write-only attribute)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + publicly_accessible                   = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_throughput                    = (known after apply)
      + storage_type                          = (known after apply)
      + tags_all                              = (known after apply)
      + timezone                              = (known after apply)
      + username                              = "admin"
      + vpc_security_group_ids                = (known after apply)
    }

  # module.rds.aws_db_subnet_group.main will be created
  + resource "aws_db_subnet_group" "main" {
      + arn                     = (known after apply)
      + description             = "Managed by Terraform"
      + id                      = (known after apply)
      + name                    = "main-db-subnet-group"
      + name_prefix             = (known after apply)
      + subnet_ids              = (known after apply)
      + supported_network_types = (known after apply)
      + tags_all                = (known after apply)
      + vpc_id                  = (known after apply)
    }

  # module.s3.aws_s3_bucket.app_data will be created
  + resource "aws_s3_bucket" "app_data" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "cst8918-finalproject"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.security.aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.security.aws_security_group.db will be created
  + resource "aws_security_group" "db" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 3306
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "db-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.security.aws_security_group.instance will be created
  + resource "aws_security_group" "instance" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "instance-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_internet_gateway.main will be created
  + resource "aws_internet_gateway" "main" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags_all = (known after apply)
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.101.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.102.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags_all                             = (known after apply)
    }

Plan: 22 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + alb_dns_name         = (known after apply)
  + cloudwatch_log_group = "/aws/ec2/CST8918_FinalProject"
  + private_subnet_ids   = [
      + (known after apply),
      + (known after apply),
    ]
  + public_subnet_ids    = [
      + (known after apply),
      + (known after apply),
    ]
  + rds_endpoint         = (known after apply)
  + s3_bucket_name       = "cst8918-finalproject"
  + vpc_id               = (known after apply)
module.s3.aws_s3_bucket.app_data: Creating...
module.vpc.aws_vpc.main: Creating...
module.monitoring.aws_cloudwatch_log_group.app: Creating...
module.monitoring.aws_cloudwatch_log_group.app: Creation complete after 0s [id=/aws/ec2/CST8918_FinalProject]
module.s3.aws_s3_bucket.app_data: Creation complete after 0s [id=cst8918-finalproject]
module.vpc.aws_vpc.main: Creation complete after 1s [id=vpc-019bed2fbc7afa816]
module.vpc.aws_subnet.private[1]: Creating...
module.vpc.aws_subnet.public[1]: Creating...
module.alb.aws_lb_target_group.main: Creating...
module.vpc.aws_subnet.public[0]: Creating...
module.vpc.aws_subnet.private[0]: Creating...
module.security.aws_security_group.alb: Creating...
module.vpc.aws_internet_gateway.main: Creating...
module.vpc.aws_internet_gateway.main: Creation complete after 0s [id=igw-0afed54d7c7180744]
module.vpc.aws_route_table.public: Creating...
module.vpc.aws_subnet.private[1]: Creation complete after 0s [id=subnet-087029494d70202df]
module.vpc.aws_subnet.private[0]: Creation complete after 0s [id=subnet-0922f50f9b224459d]
module.rds.aws_db_subnet_group.main: Creating...
module.alb.aws_lb_target_group.main: Creation complete after 1s [id=arn:aws:elasticloadbalancing:us-east-1:329599647793:targetgroup/main-tg/bc0f16b7bb783874]
module.vpc.aws_route_table.public: Creation complete after 1s [id=rtb-0e53a9fb20db867eb]
module.rds.aws_db_subnet_group.main: Creation complete after 2s [id=main-db-subnet-group]
module.security.aws_security_group.alb: Creation complete after 2s [id=sg-0c18662dcdbd21444]
module.security.aws_security_group.instance: Creating...
module.security.aws_security_group.instance: Creation complete after 2s [id=sg-012fe0417f661f81b]
module.security.aws_security_group.db: Creating...
module.asg.aws_launch_template.main: Creating...
module.security.aws_security_group.db: Creation complete after 3s [id=sg-0a74958fee3d0233e]
module.rds.aws_db_instance.main: Creating...
module.asg.aws_launch_template.main: Creation complete after 6s [id=lt-02ca42748a048996d]
module.asg.aws_autoscaling_group.main: Creating...
module.vpc.aws_subnet.public[1]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[0]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[0]: Creation complete after 11s [id=subnet-0922c67fbdac46895]
module.vpc.aws_subnet.public[1]: Creation complete after 12s [id=subnet-03629f54d85f53e9a]
module.vpc.aws_route_table_association.public[1]: Creating...
module.vpc.aws_route_table_association.public[0]: Creating...
module.alb.aws_lb.main: Creating...
module.vpc.aws_route_table_association.public[1]: Creation complete after 0s [id=rtbassoc-09dba172f31f9b21f]
module.vpc.aws_route_table_association.public[0]: Creation complete after 0s [id=rtbassoc-00d31be83a9d65750]
module.rds.aws_db_instance.main: Still creating... [10s elapsed]
module.asg.aws_autoscaling_group.main: Still creating... [10s elapsed]
module.alb.aws_lb.main: Still creating... [10s elapsed]
module.rds.aws_db_instance.main: Still creating... [20s elapsed]
module.asg.aws_autoscaling_group.main: Still creating... [20s elapsed]
module.alb.aws_lb.main: Still creating... [20s elapsed]
module.asg.aws_autoscaling_group.main: Creation complete after 25s [id=main-asg]
module.monitoring.aws_cloudwatch_metric_alarm.cpu_high: Creating...
module.monitoring.aws_cloudwatch_metric_alarm.cpu_high: Creation complete after 0s [id=CST8918_FinalProject-high-cpu]
module.rds.aws_db_instance.main: Still creating... [30s elapsed]
module.alb.aws_lb.main: Still creating... [30s elapsed]
module.rds.aws_db_instance.main: Still creating... [40s elapsed]
module.alb.aws_lb.main: Still creating... [40s elapsed]
module.rds.aws_db_instance.main: Still creating... [50s elapsed]
module.alb.aws_lb.main: Still creating... [50s elapsed]
module.rds.aws_db_instance.main: Still creating... [1m0s elapsed]
module.alb.aws_lb.main: Still creating... [1m0s elapsed]
module.rds.aws_db_instance.main: Still creating... [1m10s elapsed]
module.alb.aws_lb.main: Still creating... [1m10s elapsed]
module.rds.aws_db_instance.main: Still creating... [1m20s elapsed]
module.alb.aws_lb.main: Still creating... [1m20s elapsed]
module.rds.aws_db_instance.main: Still creating... [1m30s elapsed]
module.alb.aws_lb.main: Still creating... [1m30s elapsed]
module.rds.aws_db_instance.main: Still creating... [1m40s elapsed]
module.alb.aws_lb.main: Still creating... [1m40s elapsed]
module.rds.aws_db_instance.main: Still creating... [1m50s elapsed]
module.alb.aws_lb.main: Still creating... [1m50s elapsed]
module.rds.aws_db_instance.main: Still creating... [2m0s elapsed]
module.alb.aws_lb.main: Still creating... [2m0s elapsed]
module.rds.aws_db_instance.main: Still creating... [2m10s elapsed]
module.alb.aws_lb.main: Still creating... [2m10s elapsed]
module.rds.aws_db_instance.main: Still creating... [2m20s elapsed]
module.alb.aws_lb.main: Still creating... [2m20s elapsed]
module.rds.aws_db_instance.main: Still creating... [2m30s elapsed]
module.alb.aws_lb.main: Still creating... [2m30s elapsed]
module.rds.aws_db_instance.main: Still creating... [2m40s elapsed]
module.alb.aws_lb.main: Still creating... [2m40s elapsed]
module.rds.aws_db_instance.main: Still creating... [2m50s elapsed]
module.alb.aws_lb.main: Still creating... [2m50s elapsed]
module.rds.aws_db_instance.main: Still creating... [3m0s elapsed]
module.alb.aws_lb.main: Still creating... [3m0s elapsed]
module.rds.aws_db_instance.main: Still creating... [3m10s elapsed]
module.alb.aws_lb.main: Still creating... [3m10s elapsed]
module.alb.aws_lb.main: Creation complete after 3m12s [id=arn:aws:elasticloadbalancing:us-east-1:329599647793:loadbalancer/app/main-alb/597325c0e452d13b]
module.alb.aws_lb_listener.main: Creating...
module.alb.aws_lb_listener.main: Creation complete after 0s [id=arn:aws:elasticloadbalancing:us-east-1:329599647793:listener/app/main-alb/597325c0e452d13b/8481ac55ead723cb]
module.rds.aws_db_instance.main: Still creating... [3m20s elapsed]
module.rds.aws_db_instance.main: Still creating... [3m30s elapsed]
module.rds.aws_db_instance.main: Still creating... [3m40s elapsed]
module.rds.aws_db_instance.main: Creation complete after 3m43s [id=db-HVJOV5TXB6A26RNLQ23LW5B3DA]

Apply complete! Resources: 22 added, 0 changed, 0 destroyed.

Outputs:

alb_dns_name = "main-alb-1637770781.us-east-1.elb.amazonaws.com"
cloudwatch_log_group = "/aws/ec2/CST8918_FinalProject"
private_subnet_ids = [
  "subnet-0922f50f9b224459d",
  "subnet-087029494d70202df",
]
public_subnet_ids = [
  "subnet-0922c67fbdac46895",
  "subnet-03629f54d85f53e9a",
]
rds_endpoint = "terraform-20250416205243729300000004.c1ige4ee69n4.us-east-1.rds.amazonaws.com:3306"
s3_bucket_name = "cst8918-finalproject"
vpc_id = "vpc-019bed2fbc7afa816"